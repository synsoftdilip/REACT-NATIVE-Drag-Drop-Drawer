{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nexport function draggable(Consumer) {\n  var BaseDraggable = function (_React$Component) {\n    _inherits(BaseDraggable, _React$Component);\n\n    var _super = _createSuper(BaseDraggable);\n\n    function BaseDraggable(props) {\n      var _this;\n\n      _classCallCheck(this, BaseDraggable);\n\n      _this = _super.call(this, props);\n\n      _this.onLayout = function () {\n        if (_this.props.onLayout) {\n          var _this$props;\n\n          (_this$props = _this.props).onLayout.apply(_this$props, arguments);\n        }\n\n        _this.measure();\n      };\n\n      _this.handleRef = function (element) {\n        if (element && element.getNode) {\n          _this.element = element.getNode();\n        } else {\n          _this.element = element;\n        }\n      };\n\n      _this.identifier = props.customId || Symbol(\"draggable\");\n      _this.state = {\n        pan: new Animated.ValueXY()\n      };\n      _this.moveEvent = Animated.event([null, {\n        dx: _this.state.pan.x,\n        dy: _this.state.pan.y\n      }]);\n      _this.panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n          return true;\n        },\n        onPanResponderMove: function onPanResponderMove(e, gesture) {\n          var _e$nativeEvent = e.nativeEvent,\n              pageX = _e$nativeEvent.pageX,\n              pageY = _e$nativeEvent.pageY;\n\n          _this.props.__dndContext.handleDragMove(_this.identifier, {\n            x: pageX,\n            y: pageY\n          });\n\n          _this.moveEvent(e, gesture);\n        },\n        onPanResponderStart: function onPanResponderStart(e) {\n          var _e$nativeEvent2 = e.nativeEvent,\n              pageX = _e$nativeEvent2.pageX,\n              pageY = _e$nativeEvent2.pageY;\n\n          _this.props.__dndContext.handleDragStart(_this.identifier, {\n            x: pageX,\n            y: pageY\n          });\n        },\n        onPanResponderRelease: function onPanResponderRelease(e) {\n          var _e$nativeEvent3 = e.nativeEvent,\n              pageX = _e$nativeEvent3.pageX,\n              pageY = _e$nativeEvent3.pageY;\n\n          if (_this.props.bounceBack) {\n            Animated.spring(_this.state.pan, {\n              toValue: {\n                x: 0,\n                y: 0\n              }\n            }).start();\n          }\n\n          _this.props.__dndContext.handleDragEnd(_this.identifier, {\n            x: pageX,\n            y: pageY\n          });\n        }\n      });\n      return _this;\n    }\n\n    _createClass(BaseDraggable, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.props.__dndContext.registerDraggable(this.identifier, {\n          onDragStart: this.props.onDragStart,\n          onDragEnd: this.props.onDragEnd,\n          payload: this.props.payload\n        });\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.props.__dndContext.unregisterDraggable(this.identifier);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var updatedDraggable = {};\n\n        if (prevProps.onDragEnd !== this.props.onDragEnd) {\n          updatedDraggable.onDragEnd = this.props.onDragEnd;\n        }\n\n        if (prevProps.onDragStart !== this.props.onDragStart) {\n          updatedDraggable.onDragStart = this.props.onDragStart;\n        }\n\n        if (prevProps.payload !== this.props.payload) {\n          updatedDraggable.payload = this.props.payload;\n        }\n\n        if (Object.keys(updatedDraggable).length !== 0) {\n          this.props.__dndContext.updateDraggable(this.identifier, updatedDraggable);\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var _this2 = this;\n\n        if (this.element) {\n          this.element.measureInWindow(function (x, y, width, height) {\n            _this2.props.__dndContext.updateDraggable(_this2.identifier, {\n              layout: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n              }\n            });\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var children = this.props.children;\n        return children({\n          viewProps: _extends({\n            onLayout: this.onLayout,\n            ref: this.handleRef,\n            style: {\n              transform: this.state.pan.getTranslateTransform()\n            }\n          }, this.panResponder.panHandlers)\n        });\n      }\n    }]);\n\n    return BaseDraggable;\n  }(React.Component);\n\n  BaseDraggable.defaultProps = {\n    bounceBack: true\n  };\n  var Draggable = React.forwardRef(function (props, ref) {\n    return React.createElement(Consumer, null, function (dndContext) {\n      return React.createElement(BaseDraggable, _extends({}, props, {\n        ref: ref,\n        __dndContext: dndContext\n      }));\n    });\n  });\n  Draggable.displayName = \"ConnectedDraggable\";\n  return Draggable;\n}","map":{"version":3,"sources":["D:/AndroidProject/Expo/TestTask/taskbox/node_modules/react-native-easy-dnd/lib/draggable.js"],"names":["React","draggable","Consumer","BaseDraggable","props","onLayout","measure","handleRef","element","getNode","identifier","customId","Symbol","state","pan","Animated","ValueXY","moveEvent","event","dx","x","dy","y","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderMove","e","gesture","nativeEvent","pageX","pageY","__dndContext","handleDragMove","onPanResponderStart","handleDragStart","onPanResponderRelease","bounceBack","spring","toValue","start","handleDragEnd","registerDraggable","onDragStart","onDragEnd","payload","unregisterDraggable","prevProps","updatedDraggable","Object","keys","length","updateDraggable","measureInWindow","width","height","layout","children","viewProps","ref","style","transform","getTranslateTransform","panHandlers","Component","defaultProps","Draggable","forwardRef","createElement","dndContext","displayName"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { PanResponder, Animated } from \"react-native\";\nexport function draggable(Consumer) {\n    class BaseDraggable extends React.Component {\n        constructor(props) {\n            super(props);\n            this.onLayout = (...args) => {\n                if (this.props.onLayout) {\n                    this.props.onLayout(...args);\n                }\n                this.measure();\n            };\n            this.handleRef = (element) => {\n                if (element && element.getNode) {\n                    this.element = element.getNode();\n                }\n                else {\n                    this.element = element;\n                }\n            };\n            this.identifier = props.customId || Symbol(\"draggable\");\n            this.state = {\n                pan: new Animated.ValueXY()\n            };\n            this.moveEvent = Animated.event([\n                null,\n                {\n                    dx: this.state.pan.x,\n                    dy: this.state.pan.y\n                }\n            ]);\n            this.panResponder = PanResponder.create({\n                onStartShouldSetPanResponder: () => true,\n                onPanResponderMove: (e, gesture) => {\n                    const { pageX, pageY } = e.nativeEvent;\n                    this.props.__dndContext.handleDragMove(this.identifier, {\n                        x: pageX,\n                        y: pageY\n                    });\n                    this.moveEvent(e, gesture);\n                },\n                onPanResponderStart: e => {\n                    const { pageX, pageY } = e.nativeEvent;\n                    this.props.__dndContext.handleDragStart(this.identifier, {\n                        x: pageX,\n                        y: pageY\n                    });\n                },\n                onPanResponderRelease: e => {\n                    const { pageX, pageY } = e.nativeEvent;\n                    if (this.props.bounceBack) {\n                        Animated.spring(this.state.pan, {\n                            toValue: { x: 0, y: 0 }\n                        }).start();\n                    }\n                    this.props.__dndContext.handleDragEnd(this.identifier, {\n                        x: pageX,\n                        y: pageY\n                    });\n                }\n            });\n        }\n        componentDidMount() {\n            this.props.__dndContext.registerDraggable(this.identifier, {\n                onDragStart: this.props.onDragStart,\n                onDragEnd: this.props.onDragEnd,\n                payload: this.props.payload\n            });\n        }\n        componentWillUnmount() {\n            this.props.__dndContext.unregisterDraggable(this.identifier);\n        }\n        componentDidUpdate(prevProps) {\n            const updatedDraggable = {};\n            if (prevProps.onDragEnd !== this.props.onDragEnd) {\n                updatedDraggable.onDragEnd = this.props.onDragEnd;\n            }\n            if (prevProps.onDragStart !== this.props.onDragStart) {\n                updatedDraggable.onDragStart = this.props.onDragStart;\n            }\n            if (prevProps.payload !== this.props.payload) {\n                updatedDraggable.payload = this.props.payload;\n            }\n            if (Object.keys(updatedDraggable).length !== 0) {\n                this.props.__dndContext.updateDraggable(this.identifier, updatedDraggable);\n            }\n        }\n        measure() {\n            if (this.element) {\n                this.element.measureInWindow((x, y, width, height) => {\n                    this.props.__dndContext.updateDraggable(this.identifier, {\n                        layout: { x, y, width, height }\n                    });\n                });\n            }\n        }\n        render() {\n            const { children } = this.props;\n            return children({\n                viewProps: Object.assign({ onLayout: this.onLayout, ref: this.handleRef, style: {\n                        transform: this.state.pan.getTranslateTransform()\n                    } }, this.panResponder.panHandlers)\n            });\n        }\n    }\n    BaseDraggable.defaultProps = {\n        bounceBack: true\n    };\n    const Draggable = React.forwardRef((props, ref) => (React.createElement(Consumer, null, dndContext => (React.createElement(BaseDraggable, Object.assign({}, props, { ref: ref, __dndContext: dndContext }))))));\n    Draggable.displayName = \"ConnectedDraggable\";\n    return Draggable;\n}\n"]},"metadata":{},"sourceType":"module"}