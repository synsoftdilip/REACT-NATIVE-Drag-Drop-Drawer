{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport createReactContext from \"create-react-context\";\nimport { draggable } from \"./draggable\";\nimport { droppable } from \"./droppable\";\n\nfunction createDndContext() {\n  var Context = createReactContext({});\n  var Provider = Context.Provider,\n      Consumer = Context.Consumer;\n\n  var DragAndDropProvider = function (_React$Component) {\n    _inherits(DragAndDropProvider, _React$Component);\n\n    var _super = _createSuper(DragAndDropProvider);\n\n    function DragAndDropProvider() {\n      var _this;\n\n      _classCallCheck(this, DragAndDropProvider);\n\n      _this = _super.apply(this, arguments);\n      _this.state = {\n        draggables: [],\n        droppables: [],\n        dragOffset: [0, 0]\n      };\n\n      _this.registerDraggable = function (id, data) {\n        var existing = _this.getDraggable(id);\n\n        if (existing) {\n          throw new Error(\"Draggable has already been registered.\");\n        }\n\n        var draggable = _extends({\n          id: id,\n          layout: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n          },\n          dragging: false\n        }, data);\n\n        _this.setState(function (_ref) {\n          var draggables = _ref.draggables;\n          return {\n            draggables: [].concat(_toConsumableArray(draggables), [draggable])\n          };\n        });\n      };\n\n      _this.updateDraggable = function (id, data) {\n        _this.setState(function (_ref2) {\n          var draggables = _ref2.draggables;\n          return {\n            draggables: draggables.map(function (draggable) {\n              if (draggable.id === id) {\n                return _extends({}, draggable, data);\n              }\n\n              return draggable;\n            })\n          };\n        });\n      };\n\n      _this.unregisterDraggable = function (id) {\n        _this.setState(function (_ref3) {\n          var draggables = _ref3.draggables;\n          return {\n            draggables: draggables.filter(function (draggable) {\n              return draggable.id !== id;\n            })\n          };\n        });\n      };\n\n      _this.registerDroppable = function (id, data) {\n        var existing = _this.getDroppable(id);\n\n        if (existing) {\n          throw new Error(\"Droppable has already been registered.\");\n        }\n\n        var droppable = _extends({\n          id: id\n        }, data, {\n          layout: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n          }\n        });\n\n        _this.setState(function (_ref4) {\n          var droppables = _ref4.droppables;\n          return {\n            droppables: [].concat(_toConsumableArray(droppables), [droppable])\n          };\n        });\n      };\n\n      _this.unregisterDroppable = function (id) {\n        _this.setState(function (_ref5) {\n          var draggables = _ref5.draggables;\n          return {\n            draggables: draggables.filter(function (draggable) {\n              return draggable.id !== id;\n            })\n          };\n        });\n      };\n\n      _this.updateDroppable = function (id, data) {\n        _this.setState(function (_ref6) {\n          var droppables = _ref6.droppables;\n          return {\n            droppables: droppables.map(function (droppable) {\n              if (droppable.id === id) {\n                return _extends({}, droppable, data);\n              }\n\n              return droppable;\n            })\n          };\n        });\n      };\n\n      _this.getDraggable = function (id) {\n        return _this.state.draggables.find(function (draggable) {\n          return draggable.id === id;\n        });\n      };\n\n      _this.getDroppable = function (id) {\n        return _this.state.droppables.find(function (droppable) {\n          return droppable.id === id;\n        });\n      };\n\n      _this.getDroppableInArea = function (_ref7) {\n        var x = _ref7.x,\n            y = _ref7.y;\n\n        var _x = x - _this.state.dragOffset[0];\n\n        var _y = y - _this.state.dragOffset[1];\n\n        return _this.state.droppables.find(function (_ref8) {\n          var layout = _ref8.layout;\n          return layout && _x >= layout.x && _y >= layout.y && _x <= layout.x + layout.width && _y <= layout.y + layout.height;\n        });\n      };\n\n      _this.handleDragStart = function (id, position) {\n        var draggable = _this.getDraggable(id);\n\n        if (draggable) {\n          var layout = draggable.layout;\n          var center = [layout.x + Math.round(layout.width / 2), layout.y + Math.round(layout.height / 2)];\n          var dragOffset = [position.x - center[0], position.y - center[1]];\n\n          _this.setState({\n            currentDragging: id,\n            dragOffset: dragOffset\n          });\n\n          if (draggable.onDragStart) {\n            draggable.onDragStart();\n          }\n        }\n      };\n\n      _this.handleDragEnd = function (draggingId, position) {\n        var droppable = _this.getDroppableInArea(position);\n\n        var draggable = _this.getDraggable(draggingId);\n\n        if (draggable && droppable && droppable.onDrop) {\n          droppable.onDrop(draggable, position);\n        }\n\n        if (draggable && draggable.onDragEnd) {\n          draggable.onDragEnd(droppable);\n        }\n\n        _this.setState({\n          currentDragging: undefined,\n          dragOffset: [0, 0]\n        });\n      };\n\n      _this.handleDragMove = function (draggingId, position) {\n        var currentDroppable = _this.getDroppableInArea(position);\n\n        var draggable = _this.getDraggable(draggingId);\n\n        var prevDroppingId = _this.state.currentDropping;\n\n        if (currentDroppable) {\n          if (currentDroppable.id !== _this.state.currentDropping && draggable) {\n            _this.setState({\n              currentDropping: currentDroppable.id\n            });\n\n            if (currentDroppable.onEnter) {\n              currentDroppable.onEnter(draggable, position);\n            }\n          }\n        } else if (_this.state.currentDropping) {\n          if (prevDroppingId) {\n            var prevDroppable = _this.getDroppable(prevDroppingId);\n\n            if (prevDroppable && prevDroppable.onLeave) {\n              prevDroppable.onLeave(draggable, position);\n            }\n          }\n\n          _this.setState({\n            currentDropping: undefined\n          });\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(DragAndDropProvider, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Provider, {\n          value: {\n            currentDragging: this.state.currentDragging,\n            currentDropping: this.state.currentDropping,\n            droppables: this.state.droppables,\n            draggables: this.state.draggables,\n            dragOffset: this.state.dragOffset,\n            registerDraggable: this.registerDraggable,\n            updateDraggable: this.updateDraggable,\n            unregisterDraggable: this.unregisterDraggable,\n            registerDroppable: this.registerDroppable,\n            updateDroppable: this.updateDroppable,\n            unregisterDroppable: this.unregisterDroppable,\n            handleDragStart: this.handleDragStart,\n            handleDragEnd: this.handleDragEnd,\n            handleDragMove: this.handleDragMove,\n            getDraggable: this.getDraggable,\n            getDroppable: this.getDroppable\n          }\n        }, this.props.children);\n      }\n    }]);\n\n    return DragAndDropProvider;\n  }(React.Component);\n\n  var Draggable = draggable(Consumer);\n  var Droppable = droppable(Consumer);\n  return {\n    Provider: DragAndDropProvider,\n    Draggable: Draggable,\n    Droppable: Droppable,\n    Consumer: Consumer\n  };\n}\n\nexport { createDndContext };","map":{"version":3,"sources":["D:/AndroidProject/Expo/TestTask2/node_modules/react-native-easy-dnd/lib/dragAndDropContext.js"],"names":["React","createReactContext","draggable","droppable","createDndContext","Context","Provider","Consumer","DragAndDropProvider","arguments","state","draggables","droppables","dragOffset","registerDraggable","id","data","existing","getDraggable","Error","layout","x","y","width","height","dragging","setState","updateDraggable","map","unregisterDraggable","filter","registerDroppable","getDroppable","unregisterDroppable","updateDroppable","find","getDroppableInArea","_x","_y","handleDragStart","position","center","Math","round","currentDragging","onDragStart","handleDragEnd","draggingId","onDrop","onDragEnd","undefined","handleDragMove","currentDroppable","prevDroppingId","currentDropping","onEnter","prevDroppable","onLeave","createElement","value","props","children","Component","Draggable","Droppable"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport createReactContext from \"create-react-context\";\nimport { draggable } from \"./draggable\";\nimport { droppable } from \"./droppable\";\nfunction createDndContext() {\n    const Context = createReactContext({});\n    const { Provider, Consumer } = Context;\n    class DragAndDropProvider extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                draggables: [],\n                droppables: [],\n                dragOffset: [0, 0]\n            };\n            this.registerDraggable = (id, data) => {\n                const existing = this.getDraggable(id);\n                if (existing) {\n                    throw new Error(`Draggable has already been registered.`);\n                }\n                const draggable = Object.assign({ id, layout: { x: 0, y: 0, width: 0, height: 0 }, dragging: false }, data);\n                this.setState(({ draggables }) => ({\n                    draggables: [...draggables, draggable]\n                }));\n            };\n            this.updateDraggable = (id, data) => {\n                this.setState(({ draggables }) => ({\n                    draggables: draggables.map(draggable => {\n                        if (draggable.id === id) {\n                            return Object.assign({}, draggable, data);\n                        }\n                        return draggable;\n                    })\n                }));\n            };\n            this.unregisterDraggable = (id) => {\n                this.setState(({ draggables }) => ({\n                    draggables: draggables.filter(draggable => draggable.id !== id)\n                }));\n            };\n            this.registerDroppable = (id, data) => {\n                const existing = this.getDroppable(id);\n                if (existing) {\n                    throw new Error(`Droppable has already been registered.`);\n                }\n                const droppable = Object.assign({ id }, data, { layout: { x: 0, y: 0, width: 0, height: 0 } });\n                this.setState(({ droppables }) => ({\n                    droppables: [...droppables, droppable]\n                }));\n            };\n            this.unregisterDroppable = (id) => {\n                this.setState(({ draggables }) => ({\n                    draggables: draggables.filter(draggable => draggable.id !== id)\n                }));\n            };\n            this.updateDroppable = (id, data) => {\n                this.setState(({ droppables }) => ({\n                    droppables: droppables.map(droppable => {\n                        if (droppable.id === id) {\n                            return Object.assign({}, droppable, data);\n                        }\n                        return droppable;\n                    })\n                }));\n            };\n            this.getDraggable = (id) => {\n                return this.state.draggables.find(draggable => draggable.id === id);\n            };\n            this.getDroppable = (id) => {\n                return this.state.droppables.find(droppable => droppable.id === id);\n            };\n            this.getDroppableInArea = ({ x, y }) => {\n                const _x = x - this.state.dragOffset[0];\n                const _y = y - this.state.dragOffset[1];\n                return this.state.droppables.find(({ layout }) => {\n                    return (layout &&\n                        _x >= layout.x &&\n                        _y >= layout.y &&\n                        _x <= layout.x + layout.width &&\n                        _y <= layout.y + layout.height);\n                });\n            };\n            this.handleDragStart = (id, position) => {\n                const draggable = this.getDraggable(id);\n                if (draggable) {\n                    const { layout } = draggable;\n                    const center = [\n                        layout.x + Math.round(layout.width / 2),\n                        layout.y + Math.round(layout.height / 2)\n                    ];\n                    const dragOffset = [position.x - center[0], position.y - center[1]];\n                    this.setState({\n                        currentDragging: id,\n                        dragOffset\n                    });\n                    if (draggable.onDragStart) {\n                        draggable.onDragStart();\n                    }\n                }\n            };\n            this.handleDragEnd = (draggingId, position) => {\n                const droppable = this.getDroppableInArea(position);\n                const draggable = this.getDraggable(draggingId);\n                if (draggable && droppable && droppable.onDrop) {\n                    droppable.onDrop(draggable, position);\n                }\n                if (draggable && draggable.onDragEnd) {\n                    draggable.onDragEnd(droppable);\n                }\n                this.setState({ currentDragging: undefined, dragOffset: [0, 0] });\n            };\n            this.handleDragMove = (draggingId, position) => {\n                const currentDroppable = this.getDroppableInArea(position);\n                const draggable = this.getDraggable(draggingId);\n                const prevDroppingId = this.state.currentDropping;\n                if (currentDroppable) {\n                    if (currentDroppable.id !== this.state.currentDropping && draggable) {\n                        this.setState({ currentDropping: currentDroppable.id });\n                        if (currentDroppable.onEnter) {\n                            currentDroppable.onEnter(draggable, position);\n                        }\n                    }\n                }\n                else if (this.state.currentDropping) {\n                    if (prevDroppingId) {\n                        const prevDroppable = this.getDroppable(prevDroppingId);\n                        if (prevDroppable && prevDroppable.onLeave) {\n                            prevDroppable.onLeave(draggable, position);\n                        }\n                    }\n                    this.setState({ currentDropping: undefined });\n                }\n            };\n        }\n        render() {\n            return (React.createElement(Provider, { value: {\n                    currentDragging: this.state.currentDragging,\n                    currentDropping: this.state.currentDropping,\n                    droppables: this.state.droppables,\n                    draggables: this.state.draggables,\n                    dragOffset: this.state.dragOffset,\n                    registerDraggable: this.registerDraggable,\n                    updateDraggable: this.updateDraggable,\n                    unregisterDraggable: this.unregisterDraggable,\n                    registerDroppable: this.registerDroppable,\n                    updateDroppable: this.updateDroppable,\n                    unregisterDroppable: this.unregisterDroppable,\n                    handleDragStart: this.handleDragStart,\n                    handleDragEnd: this.handleDragEnd,\n                    handleDragMove: this.handleDragMove,\n                    getDraggable: this.getDraggable,\n                    getDroppable: this.getDroppable\n                } }, this.props.children));\n        }\n    }\n    const Draggable = draggable(Consumer);\n    const Droppable = droppable(Consumer);\n    return {\n        Provider: DragAndDropProvider,\n        Draggable,\n        Droppable,\n        Consumer\n    };\n}\nexport { createDndContext };\n"]},"metadata":{},"sourceType":"module"}