{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\AndroidProject\\\\Expo\\\\TestTask2\\\\node_modules\\\\react-native-drag-drop-and-swap\\\\src\\\\Draggable.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\n\nvar Draggable = function (_React$Component) {\n  _inherits(Draggable, _React$Component);\n\n  var _super = _createSuper(Draggable);\n\n  function Draggable(props) {\n    var _this;\n\n    _classCallCheck(this, Draggable);\n\n    _this = _super.call(this, props);\n    _this.displayName = 'Draggable';\n    _this._initiateDrag = _this._initiateDrag.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Draggable, [{\n    key: \"_initiateDrag\",\n    value: function _initiateDrag() {\n      if (!this.props.disabled) this.context.dragContext.onDrag(this.refs.wrapper, this.props.children, this.props.data);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isDragging = this.context.dragContext.dragging && this.context.dragContext.dragging.ref;\n      isDragging = isDragging && isDragging === this.refs.wrapper;\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: this.props.activeOpacity,\n        style: this.props.style,\n        onLongPress: this.props.dragOn === 'onLongPress' ? this._initiateDrag : null,\n        onPress: this.props.onPress,\n        onPressIn: this.props.dragOn === 'onPressIn' ? this._initiateDrag : null,\n        ref: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 16\n        }\n      }, React.Children.map(this.props.children, function (child) {\n        return React.cloneElement(child, {\n          ghost: isDragging\n        });\n      }));\n    }\n  }]);\n\n  return Draggable;\n}(React.Component);\n\nDraggable.contextTypes = {\n  dragContext: PropTypes.any\n};\nDraggable.propTypes = {\n  dragOn: PropTypes.oneOf(['onLongPress', 'onPressIn'])\n};\nDraggable.defaultProps = {\n  dragOn: 'onLongPress'\n};\nexport default Draggable;","map":{"version":3,"sources":["D:/AndroidProject/Expo/TestTask2/node_modules/react-native-drag-drop-and-swap/src/Draggable.js"],"names":["React","PropTypes","Draggable","props","displayName","_initiateDrag","bind","disabled","context","dragContext","onDrag","refs","wrapper","children","data","isDragging","dragging","ref","activeOpacity","style","dragOn","onPress","Children","map","child","cloneElement","ghost","Component","contextTypes","any","propTypes","oneOf","defaultProps"],"mappings":";;;;;;;;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;;;AAKA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,S;;;;;AACF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,WAAL,GAAmB,WAAnB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,+BAArB;AAHe;AAIlB;;;;oCAUe;AACd,UAAI,CAAC,KAAKH,KAAL,CAAWI,QAAhB,EAA0B,KAAKC,OAAL,CAAaC,WAAb,CAAyBC,MAAzB,CAAgC,KAAKC,IAAL,CAAUC,OAA1C,EAAmD,KAAKT,KAAL,CAAWU,QAA9D,EAAwE,KAAKV,KAAL,CAAWW,IAAnF;AAC3B;;;6BAMQ;AAEL,UAAIC,UAAU,GAAG,KAAKP,OAAL,CAAaC,WAAb,CAAyBO,QAAzB,IAAqC,KAAKR,OAAL,CAAaC,WAAb,CAAyBO,QAAzB,CAAkCC,GAAxF;AACAF,MAAAA,UAAU,GAAGA,UAAU,IAAIA,UAAU,KAAK,KAAKJ,IAAL,CAAUC,OAApD;AACA,aAAO,oBAAC,gBAAD;AAAkB,QAAA,aAAa,EAAE,KAAKT,KAAL,CAAWe,aAA5C;AAA2D,QAAA,KAAK,EAAE,KAAKf,KAAL,CAAWgB,KAA7E;AAAoF,QAAA,WAAW,EAAE,KAAKhB,KAAL,CAAWiB,MAAX,KAAsB,aAAtB,GAAsC,KAAKf,aAA3C,GAA2D,IAA5J;AAAmK,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWkB,OAAvL;AAAgM,QAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWiB,MAAX,KAAsB,WAAtB,GAAoC,KAAKf,aAAzC,GAAyD,IAApQ;AAA0Q,QAAA,GAAG,EAAC,SAA9Q;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAELL,KAAK,CAACsB,QAAN,CAAeC,GAAf,CAAmB,KAAKpB,KAAL,CAAWU,QAA9B,EAAwC,UAAAW,KAAK,EAAI;AACjD,eAAOxB,KAAK,CAACyB,YAAN,CAAmBD,KAAnB,EAA0B;AAACE,UAAAA,KAAK,EAAEX;AAAR,SAA1B,CAAP;AACD,OAFC,CAFK,CAAP;AAOH;;;;EAlCmBf,KAAK,CAAC2B,S;;AAAxBzB,S,CAOK0B,Y,GAAe;AACpBnB,EAAAA,WAAW,EAAER,SAAS,CAAC4B;AADH,C;AAPpB3B,S,CAWK4B,S,GAAY;AACjBV,EAAAA,MAAM,EAAEnB,SAAS,CAAC8B,KAAV,CAAgB,CAAC,aAAD,EAAgB,WAAhB,CAAhB;AADS,C;AAXjB7B,S,CAmBK8B,Y,GAAe;AACpBZ,EAAAA,MAAM,EAAE;AADY,C;AAkB1B,eAAelB,SAAf","sourcesContent":["/*\n * @Author: Ranvir Gorai \n * @Date: 2018-01-30 15:04:14 \n * @Last Modified by: Ranvir Gorai\n * @Last Modified time: 2018-01-30 16:58:05\n */\nimport React from 'react';\nimport {\n  View,\n  TouchableOpacity\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nclass Draggable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'Draggable';\n        this._initiateDrag = this._initiateDrag.bind(this);\n    }\n\n    static contextTypes = {\n      dragContext: PropTypes.any\n    }\n\n    static propTypes = {\n      dragOn: PropTypes.oneOf(['onLongPress', 'onPressIn'])\n    }\n\n    _initiateDrag() {\n      if (!this.props.disabled) this.context.dragContext.onDrag(this.refs.wrapper, this.props.children, this.props.data);\n    }\n\n    static defaultProps = {\n      dragOn: 'onLongPress'\n    }\n\n    render() {\n        \n        let isDragging = this.context.dragContext.dragging && this.context.dragContext.dragging.ref;\n        isDragging = isDragging && isDragging === this.refs.wrapper;\n        return <TouchableOpacity activeOpacity={this.props.activeOpacity} style={this.props.style} onLongPress={this.props.dragOn === 'onLongPress' ? this._initiateDrag : null}  onPress={this.props.onPress} onPressIn={this.props.dragOn === 'onPressIn' ? this._initiateDrag : null} ref=\"wrapper\">\n        {\n          React.Children.map(this.props.children, child => {\n          return React.cloneElement(child, {ghost: isDragging})\n        })\n        }\n      </TouchableOpacity>;\n    }\n}\n\nexport default Draggable;\n"]},"metadata":{},"sourceType":"module"}