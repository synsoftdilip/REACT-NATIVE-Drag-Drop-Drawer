{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\AndroidProject\\\\Expo\\\\TestTask2\\\\node_modules\\\\react-native-drag-drop-and-swap\\\\src\\\\DropZone.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\n\nvar DropZone = function (_React$Component) {\n  _inherits(DropZone, _React$Component);\n\n  var _super = _createSuper(DropZone);\n\n  function DropZone(props) {\n    var _this;\n\n    _classCallCheck(this, DropZone);\n\n    _this = _super.call(this, props);\n    _this.displayName = 'DropZone';\n    _this.state = {};\n    _this.reportMeasurements = _this.reportMeasurements.bind(_assertThisInitialized(_this));\n    _this.onEnter = _this.onEnter.bind(_assertThisInitialized(_this));\n    _this.onLeave = _this.onLeave.bind(_assertThisInitialized(_this));\n    _this.onDrop = _this.onDrop.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DropZone, [{\n    key: \"reportMeasurements\",\n    value: function reportMeasurements() {\n      var _this2 = this;\n\n      if (this.props.dragging) this.context.dragContext.removeZone(this.refs.wrapper);\n      this.refs.wrapper.measure(function (_, __, width, height, x, y) {\n        if (!_this2.props.dragging) _this2.context.dragContext.updateZone({\n          width: width,\n          height: height,\n          x: x,\n          y: y,\n          ref: _this2.refs.wrapper,\n          onEnter: _this2.onEnter,\n          onLeave: _this2.onLeave,\n          onDrop: _this2.onDrop\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reportMeasurements();\n      this._timer = setInterval(this.reportMeasurements, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.dragContext.removeZone(this.refs.wrapper);\n      clearInterval(this._timer);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.reportMeasurements();\n    }\n  }, {\n    key: \"onEnter\",\n    value: function onEnter(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n      if (this.props.disabled) return;\n\n      if (!this.state.active) {\n        if (this.props.onEnter) this.props.onEnter();\n        this.setState({\n          active: true\n        });\n      }\n    }\n  }, {\n    key: \"onLeave\",\n    value: function onLeave() {\n      if (this.props.disabled) return;\n\n      if (this.state.active) {\n        if (this.props.onLeave) this.props.onLeave();\n        this.setState({\n          active: false\n        });\n      }\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(data) {\n      if (this.props.disabled) return;\n      if (this.props.onDrop) this.props.onDrop(data);\n      this.setState({\n        active: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(View, {\n        style: this.props.style,\n        pointerEvents: this.props.pointerEvents,\n        onLayout: this.reportMeasurements,\n        ref: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 16\n        }\n      }, React.Children.map(this.props.children, function (child) {\n        return React.cloneElement(child, _extends({}, _this3.props, {\n          dragOver: _this3.state.active\n        }));\n      }));\n    }\n  }]);\n\n  return DropZone;\n}(React.Component);\n\nDropZone.propTypes = {\n  onEnter: PropTypes.func,\n  onLeave: PropTypes.func,\n  onDrop: PropTypes.func\n};\nDropZone.contextTypes = {\n  dragContext: PropTypes.any\n};\nexport default DropZone;","map":{"version":3,"sources":["D:/AndroidProject/Expo/TestTask2/node_modules/react-native-drag-drop-and-swap/src/DropZone.js"],"names":["React","PropTypes","DropZone","props","displayName","state","reportMeasurements","bind","onEnter","onLeave","onDrop","dragging","context","dragContext","removeZone","refs","wrapper","measure","_","__","width","height","x","y","updateZone","ref","_timer","setInterval","clearInterval","disabled","active","setState","data","style","pointerEvents","Children","map","children","child","cloneElement","dragOver","Component","propTypes","func","contextTypes","any"],"mappings":"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","sourcesContent":["/*\n * @Author: Ranvir Gorai \n * @Date: 2018-01-30 15:04:18 \n * @Last Modified by: Ranvir Gorai \n * @Last Modified time: 2018-01-30 15:04:18 \n */\nimport React from 'react';\nimport {\n  View,\n  TouchableOpacity\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nclass DropZone extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'DropZone';\n        this.state = {};\n        this.reportMeasurements = this.reportMeasurements.bind(this);\n        this.onEnter = this.onEnter.bind(this);\n        this.onLeave = this.onLeave.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n    }\n    \n    reportMeasurements() {\n      if (this.props.dragging) this.context.dragContext.removeZone(this.refs.wrapper);\n      this.refs.wrapper.measure((_, __, width, height, x, y) => {\n        if (!this.props.dragging) this.context.dragContext.updateZone({width, height, x, y, ref: this.refs.wrapper, onEnter: this.onEnter, onLeave: this.onLeave, onDrop: this.onDrop});\n      })\n    }\n\n    static propTypes = {\n      onEnter: PropTypes.func,\n      onLeave: PropTypes.func,\n      onDrop: PropTypes.func,\n    }\n\n    componentDidMount() {\n      this.reportMeasurements();\n      this._timer = setInterval(this.reportMeasurements, 1000);\n    }\n\n    componentWillUnmount() {\n      this.context.dragContext.removeZone(this.refs.wrapper);\n      clearInterval(this._timer);\n    }\n    componentDidUpdate() {\n      this.reportMeasurements();\n    }\n\n    onEnter({x, y}) {\n      if (this.props.disabled) return;\n      if (!this.state.active) {\n        if (this.props.onEnter) this.props.onEnter();\n        this.setState({\n          active: true\n        })\n      }\n    }\n\n    onLeave() {\n      if (this.props.disabled) return;\n      if (this.state.active) {\n        if (this.props.onLeave) this.props.onLeave();\n        this.setState({\n          active: false\n        })\n      }\n    }\n\n    onDrop(data) {\n      if (this.props.disabled) return;\n      if (this.props.onDrop) this.props.onDrop(data);\n      this.setState({\n        active: false\n      })\n    }\n\n    static contextTypes = {\n      dragContext: PropTypes.any\n    }\n\n    render() {\n        return <View style={this.props.style} pointerEvents={this.props.pointerEvents} onLayout={this.reportMeasurements} ref=\"wrapper\">\n          {\n            React.Children.map(this.props.children, child => {\n              return React.cloneElement(child, Object.assign({}, this.props, {dragOver: this.state.active}));\n            }) \n          }\n        </View>;\n    }\n}\n\nexport default DropZone;\n"]},"metadata":{},"sourceType":"module"}