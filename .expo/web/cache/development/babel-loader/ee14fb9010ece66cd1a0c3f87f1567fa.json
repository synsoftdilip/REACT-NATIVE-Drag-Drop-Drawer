{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\AndroidProject\\\\Expo\\\\TestTask2\\\\src\\\\DraggyInner.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\n\nvar DraggyInner = function (_React$Component) {\n  _inherits(DraggyInner, _React$Component);\n\n  var _super = _createSuper(DraggyInner);\n\n  function DraggyInner(props) {\n    var _this;\n\n    _classCallCheck(this, DraggyInner);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      color: []\n    };\n    return _this;\n  }\n\n  _createClass(DraggyInner, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.dragOver && !this.props.ghost && !this.props.dragging) {\n        LayoutAnimation.easeInEaseOut();\n        return React.createElement(View, {\n          style: {\n            width: this.props.dragOver ? 110 : 100,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: this.props.dragOver ? 110 : 100,\n            backgroundColor: \"rgba(255,0,0,.7)\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: '#ddd',\n            fontSize: 20,\n            fontWeight: \"bold\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }\n        }, \" \", this.props.alphabet.name, \" \"));\n      }\n\n      var shadows = {\n        shadowColor: \"black\",\n        shadowOffset: {\n          width: 0,\n          height: 20\n        },\n        shadowOpacity: 0.5,\n        shadowRadius: 20,\n        opacity: 0.5\n      };\n      return React.createElement(View, {\n        style: [{\n          height: 100,\n          width: 100,\n          backgroundColor: '#ddd',\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        }, this.props.dragging ? shadows : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: this.state.color[this.props.index],\n          fontSize: 50,\n          fontWeight: \"bold\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, this.props.alphabet.name));\n    }\n  }]);\n\n  return DraggyInner;\n}(React.Component);\n\nexport { DraggyInner as default };","map":{"version":3,"sources":["D:/AndroidProject/Expo/TestTask2/src/DraggyInner.tsx"],"names":["React","windowWidth","Dimensions","get","width","windowHeight","height","DraggyInner","props","state","color","dragOver","ghost","dragging","LayoutAnimation","easeInEaseOut","alignItems","justifyContent","backgroundColor","fontSize","fontWeight","alphabet","name","shadows","shadowColor","shadowOffset","shadowOpacity","shadowRadius","opacity","index","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAA8B,OAA9B;;;;;AAaC,IAAMC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA7C;AACA,IAAMC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA9C;;IAqBoBC,W;;;;;AACjB,uBAAYC,KAAZ,EAA6B;AAAA;;AAAA;;AACzB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAFyB;AAM1B;;;;6BACQ;AACP,UAAI,KAAKF,KAAL,CAAWG,QAAX,IAAuB,CAAC,KAAKH,KAAL,CAAWI,KAAnC,IAA4C,CAAC,KAAKJ,KAAL,CAAWK,QAA5D,EAAsE;AACpEC,QAAAA,eAAe,CAACC,aAAhB;AACA,eACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLX,YAAAA,KAAK,EAAE,KAAKI,KAAL,CAAWG,QAAX,GAAsB,GAAtB,GAA4B,GAD9B;AAELK,YAAAA,UAAU,EAAE,QAFP;AAGLC,YAAAA,cAAc,EAAE,QAHX;AAILX,YAAAA,MAAM,EAAE,KAAKE,KAAL,CAAWG,QAAX,GAAsB,GAAtB,GAA4B,GAJ/B;AAKLO,YAAAA,eAAe,EAAE;AALZ,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLR,YAAAA,KAAK,EAAE,MADF;AAELS,YAAAA,QAAQ,EAAE,EAFL;AAGLC,YAAAA,UAAU,EAAE;AAHP,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOG,GAPH,EAQG,KAAKZ,KAAL,CAAWa,QAAX,CAAoBC,IARvB,EAQ6B,GAR7B,CATF,CADF;AAsBD;;AACD,UAAIC,OAAO,GAAG;AACZC,QAAAA,WAAW,EAAE,OADD;AAEZC,QAAAA,YAAY,EAAE;AAAErB,UAAAA,KAAK,EAAE,CAAT;AAAYE,UAAAA,MAAM,EAAE;AAApB,SAFF;AAGZoB,QAAAA,aAAa,EAAE,GAHH;AAIZC,QAAAA,YAAY,EAAE,EAJF;AAKZC,QAAAA,OAAO,EAAE;AALG,OAAd;AAOA,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACL;AACEtB,UAAAA,MAAM,EAAE,GADV;AAEEF,UAAAA,KAAK,EAAE,GAFT;AAGEc,UAAAA,eAAe,EAAE,MAHnB;AAIEF,UAAAA,UAAU,EAAE,QAJd;AAKEC,UAAAA,cAAc,EAAE;AALlB,SADK,EAQL,KAAKT,KAAL,CAAWK,QAAX,GAAsBU,OAAtB,GAAgC,IAR3B,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAYE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLb,UAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiB,KAAKF,KAAL,CAAWqB,KAA5B,CADF;AAELV,UAAAA,QAAQ,EAAE,EAFL;AAGLC,UAAAA,UAAU,EAAE;AAHP,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAKZ,KAAL,CAAWa,QAAX,CAAoBC,IAPvB,CAZF,CADF;AAwBD;;;;EAjEkCtB,KAAK,CAAC8B,S;;SAA1BvB,W","sourcesContent":["import React,{Component} from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  LayoutAnimation,\r\n  Alert,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Dimensions,\r\n  TouchableOpacity, SafeAreaView\r\n} from \"react-native\";\r\n\r\n\r\n const windowWidth = Dimensions.get('window').width;\r\n const windowHeight = Dimensions.get('window').height;\r\n\r\nimport {\r\n  DragContainer,\r\n  Draggable,\r\n  DropZone\r\n} from \"react-native-drag-drop-and-swap\";\r\n\r\n\r\ninterface draprops {\r\n  dragging?: any,\r\n  ghost?: any,\r\n  dragOver?: any,\r\n  alphabet?:any,\r\n  index?: any\r\n}\r\n\r\ninterface draStatae {\r\n  color: any\r\n}\r\n\r\nexport default class DraggyInner extends React.Component<draprops,draStatae> {\r\n    constructor(props: draprops) {\r\n        super(props);\r\n        this.state = {\r\n          color: []\r\n        };\r\n    \r\n      }\r\n      render() {\r\n        if (this.props.dragOver && !this.props.ghost && !this.props.dragging) {\r\n          LayoutAnimation.easeInEaseOut();\r\n          return (\r\n            <View\r\n              style={{\r\n                width: this.props.dragOver ? 110 : 100,\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                height: this.props.dragOver ? 110 : 100,\r\n                backgroundColor: \"rgba(255,0,0,.7)\"\r\n              }}\r\n            >\r\n              <Text\r\n                style={{\r\n                  color: '#ddd',\r\n                  fontSize: 20,\r\n                  fontWeight: \"bold\"\r\n                }}\r\n              >\r\n                {\" \"}\r\n                {this.props.alphabet.name}{\" \"}\r\n              </Text>\r\n            </View>\r\n          );\r\n        }\r\n        let shadows = {\r\n          shadowColor: \"black\",\r\n          shadowOffset: { width: 0, height: 20 },\r\n          shadowOpacity: 0.5,\r\n          shadowRadius: 20,\r\n          opacity: 0.5\r\n        };\r\n        return (\r\n          <View\r\n            style={[\r\n              {\r\n                height: 100,\r\n                width: 100,\r\n                backgroundColor: '#ddd',\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\"\r\n              },\r\n              this.props.dragging ? shadows : null\r\n            ]}\r\n          >\r\n            <Text\r\n              style={{\r\n                color: this.state.color[this.props.index],\r\n                fontSize: 50,\r\n                fontWeight: \"bold\"\r\n              }}\r\n            >\r\n              {this.props.alphabet.name}\r\n            </Text>\r\n          </View>\r\n        );\r\n      }\r\n}"]},"metadata":{},"sourceType":"module"}